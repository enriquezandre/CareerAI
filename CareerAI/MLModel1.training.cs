// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace CareerAI
{
    public partial class MLModel1
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"Database Fundamentals", @"Database Fundamentals"),new InputOutputColumnPair(@"Computer Architecture", @"Computer Architecture"),new InputOutputColumnPair(@"Distributed Computing Systems", @"Distributed Computing Systems"),new InputOutputColumnPair(@"Cyber Security", @"Cyber Security"),new InputOutputColumnPair(@"Networking", @"Networking"),new InputOutputColumnPair(@"Software Development", @"Software Development"),new InputOutputColumnPair(@"Programming Skills", @"Programming Skills"),new InputOutputColumnPair(@"Project Management", @"Project Management"),new InputOutputColumnPair(@"Computer Forensics Fundamentals", @"Computer Forensics Fundamentals"),new InputOutputColumnPair(@"Technical Communication", @"Technical Communication"),new InputOutputColumnPair(@"AI ML", @"AI ML"),new InputOutputColumnPair(@"Software Engineering", @"Software Engineering"),new InputOutputColumnPair(@"Business Analysis", @"Business Analysis"),new InputOutputColumnPair(@"Communication skills", @"Communication skills"),new InputOutputColumnPair(@"Data Science", @"Data Science"),new InputOutputColumnPair(@"Troubleshooting skills", @"Troubleshooting skills"),new InputOutputColumnPair(@"Graphics Designing", @"Graphics Designing")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"Database Fundamentals",@"Computer Architecture",@"Distributed Computing Systems",@"Cyber Security",@"Networking",@"Software Development",@"Programming Skills",@"Project Management",@"Computer Forensics Fundamentals",@"Technical Communication",@"AI ML",@"Software Engineering",@"Business Analysis",@"Communication skills",@"Data Science",@"Troubleshooting skills",@"Graphics Designing"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"Role",inputColumnName:@"Role"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(new LbfgsMaximumEntropyMulticlassTrainer.Options(){L1Regularization=1F,L2Regularization=1F,LabelColumnName=@"Role",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
